openapi: "3.0.0"
info:
  title: AORTA
  version: "0.1"
  description: This is the specification for the AORTA REST API.
  license:
    name: "GPL3.0"
paths:
  /users/:
    post:
      description: |
        Adds a new user.
      tags:
        - Authentication
      operationId:
        postEmail
      requestBody:
        description: An email provided by the user.
        required: true
        content:
          application/json:
            schema:
              required:
                - username
              properties:
                username:
                  type: string
                email:
                  type: string
      responses:
        200:
          description: A new account was successfully created.
          content:
            application/json:
              schema:
                properties:
                  username:
                    description: The user's username.
                    type: string
                  token:
                    description: A token for the backend API.
                    type: string
                  password:
                    description: A randomly generated password.
                    type: string

        400:
          description: The username or email were invalid.
          content:
            application/json:
              schema:
                properties:
                  invalid:
                    type: string
                    enum:
                      - username
                      - email
  /users/authenticate/:
    post:
      description: |
        Provides a new access token given a username and pasword.
      tags:
        - Authentication
      requestBody:
        description: The credentials for logging in.
        required: true
        content:
          application/json:
            schema:
              required:
                - callback
              properties:
                username:
                  description: The user's uesrname.
                  type: string
                password:
                  description: The randomly generated password provided to the user on registration.
                  type: string
      responses:
        200:
          description: The user was successfully authenticated.
          content:
            application/json:
              schema:
                properties:
                  username:
                    type: string
                  token:
                    type: string
        400:
          description: Authentication was unsuccessful.
  /notes/:
    get:
      description: |
        Get a list of notes in the database.
      tags:
        - Notes
      parameters:
        - $ref: '#/components/parameters/YearLevelQuery'
      security:
        - {}
        - ApiKey: []
      responses:
        200:
          description: Notes were successfully retrieved and returned.
          content:
            application/json:
                schema:
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    year_level:
                      type: integer
                    specialty:
                      type: integer
                    num_questions:
                      description: The total number of questions under this note.
                      type: integer
                    num_comments:
                      description: The total number of comments under this note.
                      type: integer
                    num_due:
                      description: The number of questions which have never been reviewer or are due.
                      type: integer
                      nullable: true
                    num_known:
                      description: The number of questions which have been reviewed and are not yet due. If the user is not authenticated, then this defaults to null.
                      type: integer
                      nullable: true
  /notes/{id}/:
    get:
      description: |
        Get a single note by ID.
      tags:
        - Notes
      security:
        - {}
        - ApiKey: []
      parameters:
        - $ref: '#/components/parameters/NoteId'
      responses:
        200:
          description: The note was successfully retrieved and returned.
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  content:
                    type: string
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  all_ids:
                    type: array
                    items:
                      type: integer
                  due_ids:
                    type: array
                    items:
                      type: integer
                  known_ids:
                    type: array
                    items:
                      type: integer
                  modified_at:
                    type: string
                    format: date-time
                  contributor:
                    type: object
                    properties:
                      username:
                        type: string
                      id:
                        type: integer
  /questions/{id}/:
    get:
      description: |
        Return the question with the given question ID.
      tags:
        - Question
      security:
        - {}
        - ApiKey: []
      parameters:
        - $ref: '#/components/parameters/QuestionId'
      responses:
        200:
          description: The question was successfully retrieved and returned.
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                  stem:
                    type: string
                  choices:
                    type: array
                    items:
                      $ref: '#/components/schemas/Choice'
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  num_likes:
                    type: integer
                  liked:
                    type: boolean
                    nullable: True
                  last_seen:
                    type: string
                    format: date-time
                    nullable: True
                  modified_at:
                    type: string
                    format: date-time
  /questions/:
    post:
      description: |
        Adds a new question.
      tags:
        - Question
      security:
        - ApiKey: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                note_id:
                  type: integer
                stem:
                  type: string
                choices:
                  type: array
                  items:
                    type: object
                    properties:
                      content:
                        type: string
                      explanation:
                        type: string
                      is_correct:
                        type: boolean
      responses:
        201:
          description: The question was added successfully.
  /questions/responses/:
    post:
      description: |
        Adds a response for a question.
      tags:
        - Question
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                question_id:
                  type: integer
                choice_id:
                  type: integer
      responses:
        201:
          description: The submission data was successfully added.
  /questions/likes/:
    post:
      description: |
        Adds a like to a question.
      tags:
        - Question
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                question_id:
                  type: integer
      responses:
        201:
          description: The like was successfully added.
  /questions/flags/:
    post:
      description: |
        Adds a flag to a question.
      tags:
        - Question
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                question_id:
                  type: integer
      responses:
        201:
          description: The flag was successfully added.
  /questions/comments/:
    post:
      description: |
        Adds a comment to a question.
      tags:
        - Question
      security:
        - ApiKey: []
      parameters:
        - $ref: '#/components/parameters/QuestionId'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                question_id:
                  type: integer
                content:
                  type: string
      responses:
        201:
          description: The comment was successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  /cases/{id}/:
    get:
      description: |
        Returns the case with the given case ID.
      tags:
        - Case
      security:
        - {}
        - ApiKey: []
      parameters:
        - $ref: '#/components/parameters/CaseId'
      responses:
        200:
          description: The question was successfully retrieved and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseReturned'
  /cases/random/:
    get:
      description: |
        Returns a random case given the query.
      tags:
        - Case
      security:
        - {}
        - ApiKey: []
      parameters:
        - $ref: '#/components/parameters/UnseenQuery'
      responses:
        200:
          description: A random case was successfully found, retrieved and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseReturned'
  /cases/responses/:
    post:
      description: |
        Adds submission data for a completed case.
      tags:
        - Case
      security:
        - ApiKey: []
      requestBody:
        description: The submission data. Scoring is done on the frontend to lighten the load.
        required: true
        content:
          application/json:
            schema:
              properties:
                case_id:
                  type: integer
                seconds:
                  type: integer
                score:
                  type: integer
      responses:
        201:
          description: The submission was successfully added.
  /cases/likes/:
    put:
      description: |
        Adds a like to a case.
      tags:
        - Case
      security:
        - ApiKey: []
      requestBody:
        required: True
        content:
          application/json:
            schema:
              properties:
                case_id:
                  type: integer
      responses:
        201:
          description: The like was successfully added.
  /cases/flags/:
    post:
      description: |
        Adds a flag to a case.
      tags:
        - Case
      security:
        - ApiKey: []
      requestBody:
        description: The reason for flagging.
        required: True
        content:
          application/json:
            schema:
              properties:
                case_id:
                  type: integer
      responses:
        201:
          description: The flag was successfully added.
  /cases/comments/:
    post:
      description: |
        Adds a comment to a case.
      tags:
        - Case
      security:
        - ApiKey: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                case_id:
                  type: integer
                content:
                  type: string
      responses:
        201:
          description: The comment was successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

components:
  parameters:
    YearLevelQuery:
      name: year_level
      in: query
      description: A year level in the medical degree.
      schema:
        $ref: '#/components/schemas/YearLevel'
    OffsetQuery:
      name: offset
      in: query
      description: An offset for getting a list of things.
      schema:
        type: integer
    QuantityQuery:
      name: quantity
      in: query
      description: The number of items to get for a list of things.
      schema:
        type: integer
    SearchQuery:
      name: search
      in: query
      description: A search query for (hopefully) fuzzy search for a list of things.
      schema:
        type: string
    UnseenQuery:
      name: unseen
      in: query
      description: If true, only return unseen questions or cases.
      schema:
        type: boolean
    NoteId:
      name: id
      in: path
      required: true
      description: The note ID.
      schema:
        type: integer
    QuestionId:
      name: id
      in: path
      required: true
      description: The question ID.
      schema:
        type: integer
    CaseId:
      name: id
      in: path
      required: True
      description: The case ID.
      schema:
        type: integer
  schemas:
    YearLevel:
      description: |
          This is stored in the database as an integer field.

          The correspondences are
            - 0 - no specified year level
            - 1 - Year 1
            - 2 - Year 2A
            - 3 - Year 3B
            - 4 - Year 4C
            - 5 - Year 5D
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
    Choice:
      properties:
        id:
          type: integer
        content:
          type: string
        explanation:
          type: string
        is_correct:
          type: boolean
        num_chosen:
          type: integer
    Comment:
      properties:
        content:
          type: string
        created_at:
          type: string
          format: date-time
        author:
          type: object
          properties:
            username:
              type: string
            id:
              type: integer
    Symptom:
      properties:
        property:
          type: string
          enum:
            - when
            - where
            - quality
            - quantity
            - alleviating
            - aggravating
            - radiation
            - fluctuation
        value:
          type: string
    PastDisease:
      properties:
        diagnosis:
          type: string
        whenDiagnosed:
          type: string
        complications:
          type: string
        howManaged:
          type: string
    Demographic:
      properties:
        age:
          type: integer
        gender:
          type: string
          enum:
            - female
            - male
            - nonbinary
    FamilyMember:
      properties:
        age:
          type: integer
        relation:
          type: string
          enum: ["mother", "father", "grandmother", "grandfather", "brother", "sister", "son", "daughter", "uncle", "aunt", "cousin", "niece", "nephew"]
        pastHistory:
          type: array
          items:
            $ref: '#/components/schemas/PastDisease'
    Medication:
      properties:
        name:
          type: string
        prescription:
          type: string
        compliance:
          type: string
        adverseEffects:
          type: string
        indication:
          type: string
    CaseReturned:
      properties:
        id:
          type: integer
        stem:
          type: string
        caseName:
          type: string
        demographic:
          $ref: '#/components/schemas/Demographic'
        history:
          properties:
            symptomList:
              type: array
              items:
                $ref: '#/components/schemas/Symptom'
            beliefs:
              type: string
            impacts:
              type: string
            expectation:
              type: string
            pastHistory:
              type: array
              items:
                $ref: '#/components/schemas/PastDisease'
            familyHistory:
              type: array
              items:
                $ref: '#/components/schemas/FamilyMember'
            medications:
              type: array
              items:
                $ref: '#/components/schemas/Medication'
            allergies:
              type: array
              items:
                $ref: '#/components/schemas/Medication'
            social:
              type: array
              items:
                properties:
                  property:
                    type: string
                  value:
                    type: string
        examination:
          type: array
          items:
            properties:
              property:
                type: string
              value:
                type: string
        questions:
          type: array
          items:
            properties:
              stem:
                type: string
              choices:
                type: array
                items:
                  properties:
                    content:
                      type: string
                    correct:
                      type: boolean
              explanation:
                type: string
        stats:
          properties:
            averageSeconds:
              type: integer
            averageScore:
              type: integer
        likes:
          type: integer
        commentList:
          $ref: '#/components/schemas/Comment'
        username:
          type: string
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: Token
